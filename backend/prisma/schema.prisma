
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        
enum UserRole {
  system_owner
  super_admin
  admin
  it_person
  user
}

enum BusinessType {
  small_business
  medium_business
  large_business
}

enum TicketStatus {
  pending
  solved
}

enum ITDepartment {
  it_operations
  it_qcs
}

enum UserDepartment {
  qa
  qc
  production
  microbiology
  hse
  engineering
  marketing
  accounts
  validation
  ppic
  warehouse
  development
}

enum Location {
  tongi
  salna
  mirpur
  mawna
  rupganj
}

model User {
  id            String      @id @default(cuid())
  username      String      @unique
  email         String      @unique
  password      String
  role          UserRole
  isActive      Boolean     @default(true)
  
  // Relationships
  createdById   String?
  createdBy     User?       @relation("UserCreatedBy", fields: [createdById], references: [id])
  createdUsers  User[]      @relation("UserCreatedBy")
  
  // Hierarchy tracking fields - to track who created whom in the role hierarchy
  systemOwnerId    String?
  systemOwner      User?     @relation("SystemOwnerHierarchy", fields: [systemOwnerId], references: [id])
  systemOwnerUsers User[]    @relation("SystemOwnerHierarchy")
  
  superAdminId     String?
  superAdmin       User?     @relation("SuperAdminHierarchy", fields: [superAdminId], references: [id])
  superAdminUsers  User[]    @relation("SuperAdminHierarchy")
  
  adminId          String?
  admin            User?     @relation("AdminHierarchy", fields: [adminId], references: [id])
  adminUsers       User[]    @relation("AdminHierarchy")
  
  itPersonId       String?
  itPerson         User?     @relation("ItPersonHierarchy", fields: [itPersonId], references: [id])
  itPersonUsers    User[]    @relation("ItPersonHierarchy")
  
  // Super Admin specific fields
  businessType  BusinessType?
  accountLimit  Int?
  expiryDate    DateTime?
  
  // New department and location fields
  department    ITDepartment?     // For super_admin, admin, it_person
  locations     Location[]        // Multiple locations for super_admin, single for others
  userLocation  Location?         // Single location inheritance for normal users
  
  // Tickets
  createdTickets Ticket[]   @relation("TicketCreatedBy")
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@map("users")
}

model Ticket {
  id            String        @id @default(cuid())
  description   String
  status        TicketStatus  @default(pending)
  notes         String?       // Notes added when closing ticket
  
  // Device and contact information (required)
  ip_address    String?        // Required: Only valid IP, not alternative format
  device_name   String?        // Required: Device name
  ip_number     String?    // IP number (alternative IP field)
  
  // Department information (required)
  department    ITDepartment @default(it_operations)  // Required: IT Operations or IT QCS
  user_department UserDepartment? // Optional: User's department for display/filtering
  location      Location?      // Required: Location for filtering
  
  // Relationships
  createdById   String
  createdBy     User          @relation("TicketCreatedBy", fields: [createdById], references: [id])
  
  // Attachments
  attachments   Attachment[]
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@map("tickets")
}

model Attachment {
  id          String   @id @default(cuid())
  name        String   // Display name for the attachment
  url         String   // URL/link to the attachment
  fileType    String?  // Optional file type (e.g., "pdf", "image", "document")
  
  // Relationships
  ticketId    String
  ticket      Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  
  @@map("attachments")
}

// Archive models for data older than 6 months
model ArchivedTicket {
  id            String        @id
  description   String
  status        TicketStatus
  notes         String?
  
  // Device and contact information
  ip_address    String        // Required: Only valid IP format
  device_name   String        // Required: Device name
  ip_number     String        // Required: IP number field
  
  // Department information
  department    ITDepartment  // Required: IT Operations or IT QCS
  user_department UserDepartment? // Optional: User's department for display/filtering
  location      Location?      // Required: Location for filtering
  
  createdById   String
  createdAt     DateTime
  updatedAt     DateTime
  archivedAt    DateTime      @default(now())
  
  attachments   ArchivedAttachment[]
  
  @@map("archived_tickets")
}

model ArchivedAttachment {
  id             String         @id
  name           String         // Display name for the attachment
  url            String         // URL/link to the attachment
  fileType       String?        // Optional file type (e.g., "pdf", "image", "document")
  ticketId       String
  ticket         ArchivedTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  createdAt      DateTime
  archivedAt     DateTime       @default(now())
  
  @@map("archived_attachments")
} 